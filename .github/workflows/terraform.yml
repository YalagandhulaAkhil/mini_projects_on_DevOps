# This is a basic workflow to help you get started with Actions

name: Terraform EC2 Deployment

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      # Runs a single command using the runners shell
      - name: Setup Terraform
        uses:  hashicorp/setup-terraform@v2
        with:
          terraform_version: lastest

       # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

        # Terraform Init
      - name: Initialize Terraform
        run: terraform init

      # Terraform Format Check
      - name: Terraform Format
        run: terraform fmt -check

      # Terraform Validate
      - name: Terraform Validate
        run: terraform validate

      # Terraform Plan (Show what will be deployed)
      - name: Terraform Plan
        run: terraform plan -out=tfplan

      # Terraform Apply (Deploy the changes)
      - name: Terraform Apply
        run: terraform apply -auto-approve

- name: Install Splunk on EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }} # Store your EC2 private key in GitHub Secrets
      run: |
        # Get the public IP of the EC2 instance from Terraform output
        instance_public_ip=$(terraform output -raw instance_public_ip)

        # Install Splunk using bash inline script via SSH
        echo "Installing Splunk on EC2 instance $EC2_PUBLIC_IP"

        # Create a temporary SSH key file
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem

        # Install Splunk using SSH and bash inline script
        ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP << 'EOF'
          # Update system
          sudo apt-get update -y
          sudo apt-get install -y wget

          # Download Splunk (replace with your version)
          SPLUNK_URL="https://download.splunk.com/products/splunk/releases/9.4.1/linux/splunk-9.4.1-e3bdab203ac8-linux-amd64.deb"
          SPLUNK_DEB="splunk-9.4.1-e3bdab203ac8-linux-amd64.deb"
          
          # Download and install Splunk
          wget -O $SPLUNK_DEB $SPLUNK_URL
          sudo dpkg -i $SPLUNK_DEB

          # Start Splunk and accept the license
          sudo /opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt

          # Enable Splunk to start on boot
          sudo /opt/splunk/bin/splunk enable boot-start

          # Create admin user and set password
          sudo /opt/splunk/bin/splunk add user admin -password 'Plmokn@!13579' -role admin

          # Restart Splunk to apply changes
          sudo /opt/splunk/bin/splunk restart

          echo "Splunk installation complete."
        EOF

