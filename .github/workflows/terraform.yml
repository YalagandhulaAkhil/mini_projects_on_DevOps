name: Deploy EC2 and Install Splunk

on:
  push:
    branches:
      - main  # Trigger on pushing to the main branch
  pull_request:
    branches:
      - main  # Trigger on pull request events targeting the main branch

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  deploy_and_install:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - name: Checkout repository
        uses: actions/checkout@v2

      # Setup Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      # Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Initialize Terraform
      - name: Initialize Terraform
        run: terraform init

      # Terraform Format Check
      - name: Terraform Format
        run: terraform fmt -check

      # Terraform Validate
      - name: Terraform Validate
        run: terraform validate

      # Terraform Plan (Show what will be deployed)
      - name: Terraform Plan
        run: terraform plan -out=tfplan

      # Terraform Apply (Deploy the changes)
      - name: Terraform Apply
        run: terraform apply -auto-approve

      # Get EC2 Instance Outputs
      - name: Get EC2 Instance Outputs
        id: get_outputs
        run: |
          # Fetch the outputs from Terraform
          VPC_ID=$(terraform output -raw vpc_id)
          SUBNET_ID=$(terraform output -raw subnet_id)
          INSTANCE_ID=$(terraform output -raw instance_id)
          INSTANCE_PUBLIC_IP=$(terraform output -raw instance_public_ip)
          ELASTIC_IP=$(terraform output -raw elastic_ip)

          # Set environment variables for the next steps
          echo "VPC_ID=$VPC_ID" >> $GITHUB_ENV
          echo "SUBNET_ID=$SUBNET_ID" >> $GITHUB_ENV
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV
          echo "INSTANCE_PUBLIC_IP=$INSTANCE_PUBLIC_IP" >> $GITHUB_ENV
          echo "ELASTIC_IP=$ELASTIC_IP" >> $GITHUB_ENV

      # Install Splunk on EC2
      - name: Install Splunk on EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_PRIVATE_KEY }} # Add your private key in GitHub Secrets
        run: |
          # Use the EC2 public IP from the previous step
          EC2_PUBLIC_IP=$INSTANCE_PUBLIC_IP

          # Create temporary SSH key
          echo "$PRIVATE_KEY" > private_key.pem
          chmod 600 private_key.pem

          # Install Splunk using SSH and bash inline script
          ssh -o StrictHostKeyChecking=no -i private_key.pem ubuntu@$EC2_PUBLIC_IP << 'EOF'
            # Update system
            sudo apt-get update -y
            sudo apt-get install -y wget

            # Download Splunk (replace with your version if necessary)
            SPLUNK_URL="https://download.splunk.com/products/splunk/releases/9.4.1/linux/splunk-9.4.1-e3bdab203ac8-linux-amd64.deb"
            SPLUNK_DEB="splunk-9.4.1-e3bdab203ac8-linux-amd64.deb"

            # Download and install Splunk
            wget -O $SPLUNK_DEB $SPLUNK_URL
            sudo dpkg -i $SPLUNK_DEB

            # Start Splunk and accept the license
            sudo /opt/splunk/bin/splunk start --accept-license --answer-yes --no-prompt

            # Enable Splunk to start on boot
            sudo /opt/splunk/bin/splunk enable boot-start

            # Create admin user and set password
            sudo /opt/splunk/bin/splunk add user admin -password 'Plmokn@!13579' -role admin

            # Restart Splunk to apply changes
            sudo /opt/splunk/bin/splunk restart

            echo "Splunk installation complete."
          EOF

          echo "Splunk has been successfully installed on EC2 instance."

      # Output the EC2 instance details
      - name: Output EC2 Instance Details
        run: |
          echo "VPC ID: $VPC_ID"
          echo "Subnet ID: $SUBNET_ID"
          echo "Instance ID: $INSTANCE_ID"
          echo "Instance Public IP: $INSTANCE_PUBLIC_IP"
          echo "Elastic IP: $ELASTIC_IP"
